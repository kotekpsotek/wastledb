// Assumes that user would like to establish connection with rsa encryption
1. RSA both keys (private and public) and also Secret for AES-256-GCM Synchronous Block Encryption are generated on dbs board initially when user send to dbs "Register" command,
2. In communication is using "hybrid cipher mode" so to encrypt message body is using Secret Key for AES-256-GCM Synchronous Encryption Algorithm, but to send this key to client in order to enable decode message are using RSA keys where private is for server (keep secret for client) and public is sended to client,
3. RSA keys and Secret Key are unique for each client connection so 2 clients will have got other 3 keys then another client and so on,
4. RSA public key is sended to user but private is keept on dbs,
5. RSA is used to send to user Secret Key,
6. First communication message is not encrypted but "secret key" and "nonce" which are inside it are using RSA (this is "Register" command). After this message client will having got secret key,
7. For next messages sended from client and from dbs Secret key is used to encrypt message body but "Nonce" which should be unique for each message are always sended beeing encrypted by RSA and attached to message in appropriate form
8. Nonce is always generated and re-generated on dbs,
9. Nonce is regenerated for each new message to allow best security and integrity,
10. Secret Key and RSA keys are not re-generated for whole communication
11. Encrypted message should be sended from/to dbs as HEX bytes separated using whitespace. This should look such as: A0 B3 E1
12. Encrypted key: AES Secret and Nonce should be also in above form but sepparated from message body using schema: KeysAndNonce;Message-Body 
    * format is same for both: client requests and server responses,
    * this allow to easy read after parsing and re-encoding
13. RSA Public key is sended as: PEM format after attach to appropriate key,    
    Under KeysAndNonce are:
        * rsp=RSA_KEY_AS_PEM - rsa public key represented as PEM (attached to response by dbs only for "Register" command)
        * aes=AES_KEY_HEX - aes secret key in HEX format (attached to response by dbs only for "Register" command)
        * nonce=NONCE_HEX - generated for each message for client (after that it is stored on db to wait for next request). Client should recive and attach to his new request nounce recived in previous request (in same connection span). After recive new request server will check that nonce is same as previous generated (not applicable to "Register" command because it initialize connection) and after success accept request and generate new for next response and so on
(First connection can be pottentially sniffed what can lead to violate security)