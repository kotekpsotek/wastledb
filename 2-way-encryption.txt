// Assumes that user would like to establish connection with rsa encryption
1. AES Secret key is generated for each specific user during initialization of connection,
2. RSA both keys are pre-generated and storing in file "./keys/private.pem" and "./keys/public.pem". If these files isn't presented or user wold like to generate new key pair then he should use specific cli command or do this manually,
3. In communication is using "hybrid cipher mode" so to encrypt message body is using Secret Key for AES-256-GCM Synchronous Encryption Algorithm, but to send this key to client in order to enable decode message are using RSA keys where private is for server (keep secret for client) and public is sended to client,
4. Secret Key is unique for each client connection so 2 clients will have got other 2 keys then another client and so on,
5. RSA public key is sended to user but private is keept on dbs,
6. RSA is used to send to user Secret Key, Nonce and Session Id,
7. To establish encrypted connection user must first send to dbs "InitializeEncryption" command,
8. After reciving these command dbs create session with data required to encrypt/decrypt payload and send these data back to server,
9. In encryption all messages are encrypted using AES secret key and Nonce,
10. User doesn't have to send in next messages aes key and all recived data from "InitializeEncryption" required to encrypt communication command except "session id",
11. Secret Key and RSA keys are not re-generated for whole communication
12. All data sending from dbs and recived by client are encoded to hex,
13. Client durning recived response from "InitializeEncryption" command will get rsa encrypted payload under which are: OK;aes|x=x|aes_key_hex 1-1 nonce|x=x|nonce_hex 1-1 session_id|x=x|session_id_as_uuidv4 (to obtain that message must be firstly decrypted from RSA ciphertext)
14. DBS and client after recived will cache such data: aes_key and nonce and won't attach them to next response,
15. Session id always can't be encrypted whereby client request payload for encryption should looks like: CommandType;message_content(encrypted and encoded under hex);session_id where: only message_content is encrypted,
16. Every encrypted message pieces: "CommandType", "message_content(Both encrypted)" and "session_id" ("CommandType;message_content(Both encrypted);session_id") are encoded to HEX using (code_hex (code to valid utf-8 characters code)),
17. Only message content after encryption is encoded to not valid utf-8 hex